# Python Function App to Linux on Azure
# Build a Python function app and deploy it to Azure as a Linux function app.
# Add steps that analyze code, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/python

trigger:
  branches:
    include:
    - 'main' # Trigger on to main

pr:
  branches:
    include:
    - '*' # Trigger on all branches


variables:
  # Import CDISC shared variable group
- group:  cdisc-library-shared

  # Azure Resource Manager connection created during pipeline creation
- name: azureServiceConnectionId
  value: 'a313333f-30c3-47f7-970a-560b771cd6ee'

  # Function app name
- name: functionAppName
  value: 'cdisc-library-standard-product-generator'

  # Agent VM image name
- name: vmImageName
  value: 'ubuntu-latest'

  # Working Directory
- name: workingDirectory
  value: '$(System.DefaultWorkingDirectory)'

stages:
- stage: Build
  displayName: Build stage

  jobs:
  - job: Build
    displayName: Build
    pool:
      vmImage: $(vmImageName)

    steps:
    - bash: |
        if [ -f extensions.csproj ]
        then
            dotnet build extensions.csproj --runtime ubuntu.16.04-x64 --output ./bin
        fi
      workingDirectory: $(workingDirectory)
      displayName: 'Build extensions'

    - task: UsePythonVersion@0
      displayName: 'Use Python 3.6'
      inputs:
        versionSpec: 3.7 # Functions V2 supports Python 3.6 as of today

    - bash: |
        python -m venv worker_venv
        source worker_venv/bin/activate
        pip install -r requirements.txt
      workingDirectory: $(workingDirectory)
      displayName: 'Install application dependencies'
    
    - bash: |
        source worker_venv/bin/activate
        python -m pytest
      displayName: 'Run unit tests'

    - task: ArchiveFiles@2
      displayName: 'Archive files'
      inputs:
        rootFolderOrFile: '$(workingDirectory)'
        includeRootFolder: false
        archiveType: zip
        archiveFile: $(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip
        replaceExistingArchive: true

    - publish: $(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip
      artifact: drop

- stage: deploy_to_dev
  displayName: 'DEV: Deploy Standard Products Generator'
  dependsOn: Build
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/main')) # only deploy when pushing to main branch

  jobs:
  - deployment: DeploymentJob
    environment: 'cdisc-library-standard-products-generator'
    pool:
      vmImage: $(vmImageName)

    strategy:
      runOnce:
        deploy:

          steps:
          - task: AzureFunctionApp@1
            displayName: 'Azure functions app deploy'
            inputs:
              azureSubscription: '$(azureServiceConnectionId)'
              appType: 'functionAppLinux'
              appName: '$(functionAppName)-dev'
              resourceGroupName: '$(ResourceGroup)'
              package: '$(Pipeline.Workspace)/drop/$(Build.BuildId).zip'